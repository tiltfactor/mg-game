MG_GAME_ONEUP = function ($) {
    return $.extend(MG_GAME_API, {
        wordField:null,
        gameName:'One Up',
        submitButton:null,
        media:null,
        licence_info:[],
        more_info:null,
        levels:[],
        level:1,
        words:[],
        sound:{},
        sounds:{},
        user:{},
        opponent_id:{},
        endedGames:{},
        opponent_name:{},
        pass_game_id:null,
        institution_id:null,
        back_location:null,
        toastStayTime:9900,
        socketDisconnect:null,
        socketReconnect:null,
        toastBackgroundClass:'popup_gradient',
        isDisconnected:false,
        oneup_show_curtain:function () {
            // create functionality to show and hide the curtain
            var game_curtainDiv = $('<div id="oneUp_curtain"/>');
            game_curtainDiv.appendTo($("#content")).css({
                opacity:0.7,
                height:$("#game_screen").outerHeight(),
                width:$(document).width(),
                top:$("#header").outerHeight(),
                backgroundPosition:($(window).width() / 2) + 'px ' + ($(window).height() / 2) + 'px'
            });

            $("#header .words").show();

            game_curtainDiv.show();
            game_curtainDiv.css({backgroundPosition:($(window).width() / 2) + 'px ' + ($(window).height() / 2) + 'px'});

            // add a resize handler that resizes the curtain if the window resizes
            $(window).resize(function () {
                game_curtainDiv.css({
                    height:$("#game_screen").outerHeight(),
                    width:$(document).width(),
                    top:$("#header").outerHeight(),
                    backgroundPosition:($(window).width() / 2) + 'px ' + ($(window).height() / 2) + 'px'
                });
            });
        },
        oneup_hide_curtain:function () {
            $("#oneUp_curtain").remove();
        },
        /*
         * initialize the game. called from inline script generated by the view
         */
        init:function (options) {
            var settings = $.extend(options, {ongameinit:MG_GAME_ONEUP.ongameinit}),
                game_assets_uri = $("#game_assets_uri").val();

            MG_GAME_API.game_init(settings);

            //MG_GAME_ONEUP.playSound('showimage');
            MG_GAME_ONEUP.sounds = {
                feedbackbonus:game_assets_uri + 'audio/feedbackbonus.mp3',
                feedbacknormal:game_assets_uri + 'audio/feedbacknormal.mp3',
                feedbackoneupped:game_assets_uri + 'audio/feedbackoneupped.mp3',
                gameresult:game_assets_uri + 'audio/gameresult.mp3',
                newround:game_assets_uri + 'audio/newround.mp3',
                select:game_assets_uri + 'audio/select.mp3',
                showimage:game_assets_uri + 'audio/showimage.mp3',
                submit:game_assets_uri + 'audio/submit.mp3',
                win:game_assets_uri + 'audio/win.mp3'
            };

            $.each(MG_GAME_ONEUP.sounds, function (index, source) {
                MG_GAME_ONEUP.sound[index] = new Sound(source);
            });

            $(window).resize(function () {
                onResize();
            });

            $("#fieldholder").hide();

            MG_GAME_ONEUP.wordField = $("#word");

            $('nav#menu-left').mmenu();
            $('nav#menu-right').mmenu({
                position:'right',
                counters:true
            });
        },
        actions:function (action, click_parent) {
            var continue_action = '';

            console_log('call for ' + action + " - click from: " + click_parent);
            MG_GAME_ONEUP.oneup_hide_curtain();

            $("#header .words").hide();
            $("#header .back").hide();
            switch (action) {
                case 'login':
                    $("#register").hide();
                    MG_GAME_ONEUP.setLoginScreen();
                    break;
                case 'register':
                    $("#header").find('.back').show();
                    MG_GAME_ONEUP.back_location = 'login';

                    $('#register input#email').unbind("keypress").keypress(function (e) {
                        if (e.which === 13) {
                            $('#register #btn_register').click();
                        }
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        MG_GAME_ONEUP.back_location = null;
                        MG_GAME_ONEUP.actions('login', '');
                        return false;
                    });

                    $('#register #btn_register').off('click').on('click', function (e) {
                        e.preventDefault();
                        if ($("#register #username").val().length < 6 && $("#register #password").val().length < 6 && $("#register #verifyPassword").val() < 6) {
                            $().toastmessage("showToast", {
                                    text:'Username and password are required.',
                                position:"tops-center",
                                type:"notice",
                                background:"white",
                                color:"black",
                                stayTime:MG_GAME_ONEUP.toastStayTime,
                                addClass:MG_GAME_ONEUP.toastBackgroundClass
                            });
                        } else {
                            // If no email was entered, generate a random email as a placeholder
                            var userEmail = $("#register #email").val();
                            if (!userEmail) {
                                //http://stackoverflow.com/questions/10726909/random-alpha-numeric-string-in-javascript
                                randomStr = Math.random().toString(36).slice(2)
                                userEmail = "oneup_CHANGEME_" + randomStr + "@tiltfactor.com"
                            }

                            MG_API.ajaxCall('/user/register', function (response) {
                                if (response.status === 'ok') {
                                    MG_GAME_ONEUP.actions('login', '');
                                }
                                $().toastmessage("showToast", {
                                    text:response.responseText,
                                    position:"tops-center",
                                    type:"notice",
                                    background:"white",
                                    color:"black",
                                    stayTime:MG_GAME_ONEUP.toastStayTime,
                                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                                });
                            }, {
                                type:'post',
                                data:{
                                    password:$("#register #password").val(),
                                    username:$("#register #username").val(),
                                    email:userEmail,
                                    verifyPassword:$("#register #verifyPassword").val()
                                }
                            });
                        }
                    });

                    break;
                case 'account_update':
                    var userSettings = {};

                    $("#header").find('.back').show();
                    $("#header").find('.setting').hide();
                    $("#account_update").empty();

                    MG_GAME_ONEUP.back_location = 'account';

                    userSettings.username = MG_GAME_ONEUP.user.username;
                    userSettings.email = MG_GAME_ONEUP.user.email;

                    $("#template-account_update").tmpl(userSettings).appendTo($("#account_update")).after(function () {
                        $('#register input#email').unbind("keypress").keypress(function (e) {
                            if (e.which === 13) {
                                $('#account_update #btn_update').click();
                            }
                        });

                        $("#header").find('.back').off('click').on('click', function (e) {
                            e.preventDefault();
                            $("#header").find('.back').hide();
                            MG_GAME_ONEUP.back_location = null;
                            MG_GAME_ONEUP.actions('account', '');
                            return false;
                        });

                        $('#account_update #btn_update').off('click').on('click', function (e) {
                            e.preventDefault();
                            MG_API.ajaxCall('/user/update', function (response) {
                                if (response.status === 'ok') {
                                    // What to do if success
                                    MG_GAME_ONEUP.actions('main_screen', '');
                                }
                                $().toastmessage("showToast", {
                                    text:response.responseText,
                                    position:"tops-center",
                                    type:"notice",
                                    background:"white",
                                    color:"black",
                                    stayTime:MG_GAME_ONEUP.toastStayTime,
                                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                                });
                            }, {
                                type:'post',
                                data:{
                                    password:$("#account_update #password").val(),
                                    username:$("#account_update #username").val(),
                                    email:$("#account_update #email").val()
                                }
                            });
                        });
                    });

                    break;
                case 'main_screen':
                    var confirm_text,
                        opponent_id,
                        opponent_name,
                        this_clicked;

                    $("#challenges").remove();
                    // Response sent is json encode of GameChallengesDTO
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGames/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getOfflineGames/gid/' + MG_GAME_API.settings.gid, function (offline_games) {

                        var length = offline_games.length,
                            your_turn = [],
                            waiting_turn = [],
                            counter_my_turns = 0,
                            counter_waiting_turns = 0,
                            i;

                        for (i = 0; i < length; i++) {
                            // its my turn
                            if (parseInt(offline_games[i].turnUserId, 10) === MG_GAME_ONEUP.user.id || parseInt(offline_games[i].turnUserId, 10) === 0) {
                                your_turn[counter_my_turns] = offline_games[i];
                                counter_my_turns++;
                            } else {
                                // its in waiting
                                waiting_turn[counter_waiting_turns] = offline_games[i];
                                counter_waiting_turns++;
                            }
                        }

                        MG_API.ajaxCall('/multiplayer/getChallenges/gid/' + MG_GAME_API.settings.gid, function (challenges_response) {
                            challenges_response.your_turn = your_turn;
                            challenges_response.waiting_turn = waiting_turn;
                            //MG_GAME_ONEUP.endedGames[0] = JSON.parse('{"playedGameId":"144","opponentId":2,"opponentName":"alabala","turnUserId":0}');
                            ////[{"playedGameId":"144","opponentId":3,"opponentName":"alabala","turnUserId":0}]
                            challenges_response.finished_games = MG_GAME_ONEUP.endedGames;

                            $("#challenges").remove();
                            $("#template-challenges").tmpl(challenges_response).appendTo($("#main_screen")).after(function () {
                                if (challenges_response.sent !== undefined && (challenges_response.sent.length + challenges_response.waiting_turn.length) === 0) {
                                    $("#challenges_sent").find(".no_value").show();
                                } else {
                                    var that;
                                    // add delete functionality
                                    $("#challenges_sent .delete").each(function () {
                                        $(this).off('click').on('click', function () {
                                            this_clicked = $(this);
                                            that = this_clicked.closest(".row");
                                            opponent_id = that.attr('opponent_id');
                                            var playedGameId = that.attr('playedGameId');
                                            opponent_name = that.find('span.username').text();
                                            confirm_text = "Do you really want to end your game with " + opponent_name + "?";
                                            confirmPretty(confirm_text, function () {
                                                if (playedGameId === '') {
                                                    // this is a challenge
                                                    //http://localhost/mggameserver/index.php/api/multiplayer/rejectChallenge/gid/OneUp/fromUserId/12/toUserId/14
                                                    MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + MG_GAME_ONEUP.user.id + '/toUserId/' + opponent_id, function (challenges_response) {
                                                        $("a[location='main_screen']").click();
                                                    });
                                                } else {
                                                    // game started
                                                    MG_API.ajaxCall('/multiplayer/endGame/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + playedGameId, function (challenges_response) {
                                                        $("a[location='main_screen']").click();
                                                    });
                                                }
                                            });
                                        });
                                    });
                                }
                                if ((challenges_response.received.length + challenges_response.your_turn.length) === 0) {
                                    $("#challenges_received").find(".no_value").show();
                                }
                                if ((challenges_response.received.length + challenges_response.your_turn.length + challenges_response.finished_games.length) > 0) {
                                    $("#challenges_received .delete").each(function () {
                                        $(this).off('click').on('click', function () {
                                            var that,
                                                this_clicked = $(this);

                                            that = this_clicked.closest(".row");
                                            opponent_id = that.attr('opponent_id');
                                            opponent_name = that.find('span.username').text();
                                            var playedGameId = that.attr('playedGameId');
                                            if (playedGameId === '') {
                                                confirm_text = "Are you sure you want to decline " + opponent_name + "'s " + "challenge?";
                                            } else {
                                                confirm_text = "Do you really want to end your game with " + opponent_name + "?";
                                            }
                                            confirmPretty(confirm_text, function () {
                                                if (playedGameId === '') {
                                                    // game not started yet
                                                    MG_API.ajaxCall('/multiplayer/rejectChallenge/gid/' + MG_GAME_API.settings.gid + '/fromUserId/' + opponent_id + '/toUserId/' + MG_GAME_ONEUP.user.id + '/', function (challenges_response) {
                                                        $("a[location='main_screen']").click();
                                                    });
                                                } else {
                                                    // game started
                                                    MG_API.ajaxCall('/multiplayer/endGame/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + playedGameId, function (challenges_response) {
                                                        $("a[location='main_screen']").click();
                                                    });
                                                }
                                            });
                                        });
                                    });

                                    $("#challenges_received .start_game").each(function () {
                                        var that = $(this);
                                        that.off('click').on('click', function () {
                                            var this_clicked = $(this),
                                                opponent_id = this_clicked.closest(".row").attr('opponent_id'),
                                                start_game = false;

                                            if (this_clicked.attr('type') === 'accept_challenge') {
                                                MG_API.ajaxCall('/multiplayer/acceptChallenge/gid/' + MG_GAME_API.settings.gid + '/opponentId/' + opponent_id, function (response) {
                                                    // $playedGameId
                                                    MG_GAME_ONEUP.pass_game_id = response.playedGameID;
                                                    MG_GAME_ONEUP.opponent_id = opponent_id;
                                                    MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                                    MG_GAME_ONEUP.actions('game_screen', '');
                                                });
                                            } else if (this_clicked.attr('type') === 'show_final') {
                                                MG_GAME_ONEUP.pass_game_id = this_clicked.closest(".row").attr('playedGameId');
                                                MG_GAME_ONEUP.opponent_id = opponent_id;
                                                MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                                MG_GAME_ONEUP.actions('final_screen', '');
                                            } else {
                                                // next turn
                                                start_game = true;
                                                MG_GAME_ONEUP.pass_game_id = this_clicked.closest(".row").attr('playedGameId');
                                                MG_GAME_ONEUP.opponent_id = opponent_id;
                                                MG_GAME_ONEUP.opponent_name = this_clicked.closest(".row").find('span.username').text();
                                                MG_GAME_ONEUP.actions('game_screen', '');
                                            }
                                        });
                                    });
                                }
                            });
                        });
                    });
                    break;
                case 'game_screen':
                    $("#game_screen").empty();
                    $("#header").find('.words').show();

                    //game_screen
                    //http://localhost/mggameserver/index.php/api/multiplayer/getOfflineGameState/gid/OneUp/playedGameId/212
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id, function (turn_response) {
                        /**
                         public $tags //GameTagDTO[]
                         {"turns":[{"turn":1,"score":"5","opponentScore":"10","tags":[{"tag":"pool","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"dfwefwe","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null}],"opponentTags":[{"tag":"rtytr","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"ergerge","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null},{"tag":"pool","original":null,"score":null,"weight":null,"mediaId":2,"type":"new","tag_id":null}],"media":[{"id":"2","mimeType":"image\/jpeg","imageFullSize":"http:\/\/localhost\/mgc\/www\/\/uploads\/images\/image026.jpg","imageScaled":null,"thumbnail":"http:\/\/localhost\/mgc\/www\/\/uploads\/thumbs\/image026.jpg","videoWebm":null,"videoMp4":null,"audioMp3":null,"audioOgg":null,"licence":{"id":"","name":"","description":""}}],"wordsToAvoid":[]}],"finished":false}
                         */
                        var json = {};
                        json.current_level = turn_response.turns.length;

                        if (json.current_level === 1) {
                            MG_GAME_ONEUP.playSound('showimage');
                        }

                        json.turn = turn_response.turns[(json.current_level - 1)];
                        json.opponentName = MG_GAME_ONEUP.opponent_name;

                        if (turn_response.turns[(json.current_level - 1)].opponentTags.length === 3) {
                            json.opponentStatus = 'finished';
                        } else {
                            json.opponentStatus = '';
                        }

                        json.num_words = turn_response.turns[(json.current_level - 1)].tags.length;

                        json.current_turn_tag = [];
                        var tags = turn_response.turns[(json.current_level - 1)].tags;

                        for (i = 0; i < tags.length; i++) {
                            json.current_turn_tag[i] = {};
                            json.current_turn_tag[i].div = calculatedRow(tags[i].tag, tags[i].score, MG_GAME_ONEUP.opponent_name, tags[i].type);
                        }

                        var tag_count = json.num_words;
                        $("#template-game_screen").tmpl(json).appendTo($("#game_screen")).after(function () {
                            if ($("#game_screen .words .blank_bar").length === 0) {
                                $("#game_screen .round").attr('status', 'waiting').html('WAITING ...');
                            }
                            $("#game_image").css({'height':'auto', 'max-width':$(window).width() - 25});
                            $("#game_screen .blank_bar").each(function () {
                                $(this).off('click').on('click', function () {
                                    var that = $(this),
                                        current_tag;
                                    that.empty();
                                    MG_GAME_ONEUP.playSound('select');
                                    if ($.browser.webkit) {
                                        that.append('<div><form action="#" onsubmit="return false;"><input type="text" autocapitalize="off" autocorrect="off" autocomplete="off" placeholder="ADD A WORD" /></form></div>');
                                    } else {
                                        that.append('<div><input class="add_word" type="text" autocapitalize="off" autocorrect="off" autocomplete="off" placeholder="ADD A WORD" /></div>');
                                    }
                                    that.find('input').focus();

                                    // TODO: Refactor this part
                                    // allowed keys, in game
                                    $("input").bind("keydown", function(event) {
                                        //console.log(event.which);
                                        if (event.shiftKey) { // When pressing shift, only allow these
                                            return (
                                                (event.which >= 97 && event.which <= 122) || // a-z
                                                (event.which >= 65 && event.which <= 90) // A-Z
                                            );
                                        }
                                        else {
                                            return (
                                                (event.which >= 97 && event.which <= 122) ||// a-z
                                                (event.which >= 65 && event.which <= 90) || // A-Z
                                                (event.which >= 48 && event.which <= 57) || // 0-9
                                                event.which === 8 || event.which == 13 || event.which == 32 || // Backspace, Enter, space
                                                event.which == 222 || // apostrophe
                                                event.which == 189 || event.which == 173 // dash, for different browsers
                                            );
                                        }
                                    });

                                    that.find('input').unbind("keypress").keypress(function (e) {
                                        if (e.which === 13) {
                                            var tag = that.find('input').val();

                                            // TODO: Refactor this part
                                            // replace multiple whitespaces with a single space
                                            // already done for db submissions, so not really needed here
                                            //tag = tag.replace(/\s{2,}/g, ' ');
                                            // just to be safe, strip the special chars if still present
                                            // forbid: `~!@#$%^&*()_=+{}|<>./?;:[]\",
                                            // allowed: '-
                                            tag = tag.replace(/[`~!@#$%^&*()_=+{}|<>./?;:\[\]\\",]/g, "");

                                            // Lowercase the tags. Means that the db will have all lowercase data
                                            tag = tag.toLowerCase();

                                            var new_html,
                                                validateTag = validTag(that.find('input').val(), turn_response.turns);

                                            MG_GAME_ONEUP.playSound('submit');

                                            if (validateTag === true) {
                                                //'[{"tag":"Test","original":null,"score":null,"weight":null,"mediaId":"6","type":null,"tag_id":null}]';
                                                current_tag = '[{"tag": "' + tag + '", "original":null,"score":null,"weight":null,"mediaId":"' + turn_response.turns[0].media[0].id + '","type":null,"tag_id":null}]';

                                                tag_count++;
                                                var html_status;
                                                html_status = $("#game_screen .round").html();

                                                // Work-around - Push service is fired before ajax is complete
                                                if (tag_count === 3) {
                                                    $("#game_screen .round").attr('status', 'waiting').html('WAITING ...');
                                                    $().toastmessage("showToast", {
                                                        text: 'Waiting for ' + MG_GAME_ONEUP.opponent_name,
                                                        position:"tops-center",
                                                        type:"notice",
                                                        background:"white",
                                                        color:"black",
                                                        stayTime:MG_GAME_ONEUP.toastStayTime,
                                                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                                                    });
                                                    //MG_GAME_ONEUP.oneup_show_curtain();
                                                }

                                                MG_API.ajaxCall('/multiplayer/submit/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id, function (response) {
                                                    var new_row = {};
                                                    new_row.current_turn_tag = [],
                                                        tags = turn_response.turns[(json.current_level - 1)].tags;

                                                    that.replaceWith(calculatedRow(response[0].tag, response[0].score, MG_GAME_ONEUP.opponent_name, response[0].type));

                                                    var score = parseInt(response[0].score, 10),
                                                        tag_type = response[0].type;
                                                    if (parseInt(score, 10) === 1 && tag_type === 'new') {
                                                        MG_GAME_ONEUP.playSound('feedbacknormal');
                                                    } else if (parseInt(score, 10) === 1) {
                                                        //html_class = 'up_bar';
                                                        MG_GAME_ONEUP.playSound('feedbackbonus');
                                                    } else if (score === -1) {
                                                        //html_class = 'upped_bar';
                                                        MG_GAME_ONEUP.playSound('feedbackoneupped');
                                                        // opponent need to get 1 extra point
                                                        var opponent_score_obj = $("#game_screen .opponent label");
                                                        opponent_score_obj.html(parseInt(opponent_score_obj.text(), 10) + 1);
                                                    } else if (parseInt(score, 10) >= 3) {
                                                        //html_class = 'bonus_bar';
                                                        MG_GAME_ONEUP.playSound('feedbacknormal');
                                                    }

                                                    that.off('click');

                                                    var score_obj = $("#game_screen .you label");
                                                    score_obj.html(parseInt(score_obj.text(), 10) + parseInt(response[0].score, 10));
                                                }, {
                                                    type:'post',
                                                    data:{
                                                        tags:current_tag
                                                    },
                                                    error:function (xhr, textStatus, thrownError) {
                                                        // Work-around - Push service is fired before ajax is complete
                                                        tag_count--;
                                                        $("#game_screen .round").html(html_status);

                                                        if (textStatus === "timeout") {
                                                            var error = "Timeout error: Connection Has Been Lost";
                                                        } else {
                                                            var error_response = '';
                                                            if (typeof JSON.parse(xhr.responseText) === 'object') {
                                                                var err = JSON.parse(xhr.responseText);
                                                                if (typeof err.errors !== 'undefined') {
                                                                    if (typeof err.errors === 'object') {
                                                                        $.each(err.errors, function (key, value) {
                                                                            error_response += "[" + value + "] <br />";
                                                                        });
                                                                    } else {
                                                                        error_response = err.errors;
                                                                    }
                                                                } else {
                                                                    error_response = '[' + xhr.responseText + '].';
                                                                }
                                                            } else {
                                                                error_response = '[' + xhr.responseText + '].';
                                                            }
                                                            var error = 'Following error occurred: <br />' + error_response;
                                                        }
                                                        $().toastmessage("showToast", {
                                                            text:error,
                                                            position:"tops-center",
                                                            type:"notice",
                                                            background:"white",
                                                            color:"black"
                                                        });
                                                    }
                                                });
                                            } else {
                                                $().toastmessage("showToast", {
                                                    text:validateTag,
                                                    position:"tops-center",
                                                    type:"notice",
                                                    background:"white",
                                                    color:"black",
                                                    stayTime:MG_GAME_ONEUP.toastStayTime,
                                                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                                                });
                                            }
                                            return false;
                                        }
                                    });
                                });
                            });

                            $("#header").find('.words').each(function () {
                                $(this).off('click').on('click', function (e) {
                                    e.preventDefault();
                                    $("#word_screen").empty();
                                    $("#header").find('.back').show();
                                    $("#header").find('.words').hide();
                                    MG_GAME_ONEUP.actions('word_screen', '');
                                    return false;
                                });
                            });
                        });

                        function validTag(tag, turns) {
                            var i,
                                j,
                                looped_tag,
                                return_result = true;

                            if (tag.length < 2) {
                                return_result = 'Word is not long enough!';
                            }

                            for (i = 0; i < turns.length; i++) {
                                for (j = 0; j < turns[i].tags.length; j++) {
                                    if (typeof turns[i].tags[j] !== 'undefined') {
                                        looped_tag = turns[i].tags[j].tag;
                                        if (tag.toLowerCase() === looped_tag.toLowerCase()) {
                                            console_log(j + ' -- ' + turns[i].tags[j].tag);
                                            return_result = 'You already said that!';
                                        }
                                    }
                                }
                            }

                            $("#game_screen .words div .tag").each(function () {
                                if (tag.toLowerCase() == $(this).text().toLowerCase()) {
                                    return_result = 'You already said that!';
                                }
                            });

                            return return_result;
                        }
                    });
                    break;
                case 'new_game':
                    $("#header .back").show();

                    $("#header .back").off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        MG_GAME_ONEUP.back_location = 'main_screen';
                        MG_GAME_ONEUP.actions('main_screen', '');
                        return false;
                    });
                    break;
                case 'final_screen':
                    MG_GAME_ONEUP.oneup_hide_curtain();
                    $("#final_screen").empty();
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id, function (turn_response) {
                        var json = {};
                        json.you = {};
                        json.you.round_1 = '';
                        json.you.round_2 = '';
                        json.you.round_3 = '';

                        json.opponent = {};
                        json.opponent.round_1 = '';
                        json.opponent.round_2 = '';
                        json.opponent.round_3 = '';
                        json.media = turn_response.turns[0].media[0];

                        var current_level = turn_response.turns.length;
                        for (var i = 1; i <= current_level; i++) {
                            for (var j = 0; j < 3; j++) {
                                if (j < turn_response.turns[(i - 1)].tags.length) {
                                    var j_tag = turn_response.turns[(i - 1)].tags[j];
                                    json.you['round_' + i] += calculatedRow(j_tag.tag, j_tag.score, MG_GAME_ONEUP.opponent_name, j_tag.type);
                                } else {
                                    json.you['round_' + i] += '<div class="small_row blank_bar"><div>SKIPPED WORD</div></div>';
                                }
                            }
                        }
                        var user = MG_GAME_ONEUP.user;
                        //opponentTags
                        for (var i = 1; i <= current_level; i++) {
                            for (var j = 0; j < 3; j++) {
                                if (j < turn_response.turns[(i - 1)].opponentTags.length) {
                                    var j_tag = turn_response.turns[(i - 1)].opponentTags[j];
                                    json.opponent['round_' + i] += calculatedRow(j_tag.tag, j_tag.score, user.username, j_tag.type);
                                } else {
                                    json.opponent['round_' + i] += '<div class="small_row blank_bar"><div>SKIPPED WORD</div></div>';
                                }
                            }
                        }

                        json.current_level = current_level;
                        json.score = turn_response.turns[(current_level - 1)].score;
                        json.opponentName = MG_GAME_ONEUP.opponent_name;
                        json.opponentScore = turn_response.turns[(current_level - 1)].opponentScore;

                        if (parseInt(json.score, 10) > parseInt(json.opponentScore, 10)) {
                            json.game_result = 'YOU WON!';
                            json.congratulation_text = 'Congratulations! You won!';
                            MG_GAME_ONEUP.playSound('win');
                        } else if (parseInt(json.score, 10) < parseInt(json.opponentScore, 10)) {
                            json.game_result = 'YOU LOST!';
                            json.congratulation_text = 'Better luck next time!';
                        } else {
                            json.game_result = 'TIED GAME!';
                            json.congratulation_text = "The game was too close: it's a tied game!";
                        }

                        $("#template-final_screen").tmpl(json).appendTo($("#final_screen")).after(function () {
                            if($(window).width()<400 && !(window.devicePixelRatio >= 2)){
                                $("#mediaImg").css({'max-width':180});
                            }
                            var scrollTop = $(window).scrollTop(),
                                elementOffset = $("#final_screen .fade").offset().bottom,
                                overlay_top = (elementOffset - scrollTop),
                                overlay_height = $("#final_screen .fade").height();

                            $("#overlay").css({'height':overlay_height, 'top':overlay_top});

                            $("#final_screen #bookmark_image").off('click').on('click', function () {
                                $(this).attr("disabled", true);
                                MG_API.ajaxCall('/multiplayer/bookmark/gid/' + MG_GAME_API.settings.gid + '/mediaId/' + json.media.id + '/playedId/' + MG_GAME_ONEUP.pass_game_id, function (turn_response) {
                                    $().toastmessage("showToast", {
                                        text:'You bookmarked this image. Checked already bookmarked in your profile.',
                                        position:"tops-center",
                                        type:"notice",
                                        background:"white",
                                        color:"black",
                                        stayTime:900,
                                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                                    });
                                });
                            });

                            $("#final_screen .rematch").off('click').on('click', function () {
                                //http://localhost/mggameserver/index.php/api/multiplayer/challenge/gid/OneUp/username/test
                                MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username/' + json.opponentName, function (turn_response) {
                                    $().toastmessage("showToast", {
                                        text:'Challenge to ' + json.opponentName + ' was sent.',
                                        position:"tops-center",
                                        type:"notice",
                                        background:"white",
                                        color:"black",
                                        stayTime:'900',
                                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                                    });
                                });
                            });
                        });
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        $("#header").find('.words').show();
                        MG_GAME_ONEUP.back_location = 'game_screen';
                        MG_GAME_ONEUP.actions('game_screen', '');
                        return false;
                    });
                    break;
                case 'word_screen':
                    $("#header").find('.back').show();
                    $("#game_screen").empty();
                    MG_API.ajaxCall('/multiplayer/getOfflineGameState/gid/' + MG_GAME_API.settings.gid + '/playedGameId/' + MG_GAME_ONEUP.pass_game_id, function (turn_response) {
                        var json = {};
                        json.round_1 = '';
                        json.round_2 = '';
                        json.round_3 = '';

                        var current_level = turn_response.turns.length;
                        for (var i = 1; i <= current_level; i++) {
                            for (var j = 0; j < 3; j++) {
                                if (j < turn_response.turns[(i - 1)].tags.length) {
                                    var j_tag = turn_response.turns[(i - 1)].tags[j];
                                    json['round_' + i] += calculatedRow(j_tag.tag, j_tag.score, MG_GAME_ONEUP.opponent_name, j_tag.type);
                                } else {
                                    json['round_' + i] += '<div class="small_row blank_bar add_word"><div>ADD A WORD</div></div>';
                                }
                            }
                        }
                        json.current_level = current_level;
                        json.score = turn_response.turns[(current_level - 1)].score;
                        json.opponentName = MG_GAME_ONEUP.opponent_name;
                        json.opponentScore = turn_response.turns[(current_level - 1)].opponentScore;

                        $("#template-word_screen").tmpl(json).appendTo($("#word_screen")).after(function () {

                        });
                    });

                    $("#header").find('.back').off('click').on('click', function (e) {
                        e.preventDefault();
                        $("#header").find('.back').hide();
                        $("#header").find('.words').show();
                        MG_GAME_ONEUP.back_location = 'game_screen';
                        MG_GAME_ONEUP.actions('game_screen', '');
                        return false;
                    });
                    break;
                case 'game_customize':
                    $("#game_customize .note").remove();
                    $("#game_customize").find("#listing").remove();
                    $('#new_interest').attr('value', '');


                    // TODO: Refactor this part
                    // allowed keys on the interest field
                    $("input#new_interest").bind("keydown", function(event) {
                        //console.log(event.which);
                        if (event.shiftKey) { // When pressing shift, only allow these
                            return (
                                (event.which >= 97 && event.which <= 122) || // a-z
                                (event.which >= 65 && event.which <= 90) // A-Z
                            );
                        }
                        else {
                            return (
                                (event.which >= 97 && event.which <= 122) ||// a-z
                                (event.which >= 65 && event.which <= 90) || // A-Z
                                (event.which >= 48 && event.which <= 57) || // 0-9
                                event.which === 8 || event.which == 13 || event.which == 32 || // Backspace, Enter, space
                                event.which == 188 || event.which == 222 || // comma, apostrophe
                                event.which == 189 || event.which == 173 // dash, for different browsers
                            );
                        }
                    });

                    $('input#new_interest').unbind("keypress").keypress(function (e) {
                        if (e.which == 13) {
                            $("#game_customize #node").remove();
                            $("#game_customize").find('.note').remove();
                            var string = $('#new_interest').val();

                            // TODO: Refactor this part
                            // replace multiple whitespaces with a single space
                            // already done for db submissions, so not really needed here
                            //string = string.replace(/\s{2,}/g, ' ');
                            // just to be safe, strip the special chars if still present
                            // forbid: `~!@#$%^&*()_=+{}|<>./?;:[]\"
                            // allowed: '-
                            string = string.replace(/[`~!@#$%^&*()_=+{}|<>./?;:\[\]\\"]/g, "");
                            //console.log(string);

                            var array = string.split(','),
                                counter_i = 0;
                            for (var i = 0; i < array.length; i++) {
                                MG_API.ajaxCall('/multiplayer/addInterest/gid/' + MG_GAME_API.settings.gid + '/interest/' + encodeURIComponent($.trim(array[i])), function (institution_response) {
                                    counter_i++;
                                    if (i === counter_i) {
                                        $('#new_interest').attr('value', '');
                                        $("#game_customize").find('.new_interest').append('<div class="note">Interest(s) added.</div>');
                                    }
                                });
                            }
                            return false;
                        }
                    });
                    //http://localhost/mggameserver/index.php/api/multiplayer/getInstitutions/gid/OneUp/
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid, function (institution_response) {
                        var json = {};
                        json.all_institution = institution_response;
                        $("#template-favorite_institutions").tmpl(json).appendTo($("#game_customize")).after(function () {
                            // add click on an institution
                            // click on an institution
                            $("#list_institutions .institution").off('click').on('click', function (e) {
                                e.preventDefault();
                                var row = $(this);
                                MG_GAME_ONEUP.institution_id = row.attr('institution_id');
                                MG_GAME_ONEUP.back_location = 'game_customize';
                                // institution_info
                                MG_GAME_ONEUP.actions('institution_info', '');

                            });
                        });
                    });

                    break;
                case 'make_challenge':
                    var opponent_name = '';
                    if ($("#find_opponent")) {
                        opponent_name = $("#find_opponent").find('.opponent_name').val();
                    }

                    MG_API.ajaxCall('/multiplayer/challenge/gid/' + MG_GAME_API.settings.gid + '/username/' + opponent_name, function (challenges_response) {
                        if (challenges_response === null) {
                            $().toastmessage("showToast", {
                                text:'Player is not found!',
                                position:"tops-center",
                                type:"notice",
                                background:"white",
                                color:"black",
                                stayTime:MG_GAME_ONEUP.toastStayTime,
                                addClass:MG_GAME_ONEUP.toastBackgroundClass
                            });
                            $("#content #new_game").show();
                        } else {
                            $("a[location='main_screen']").click();
                        }
                        $("#find_opponent").find('.opponent_name').attr('value', '');
                    });
                    break;
                case 'how_to':
                    var swipe_img = $("#image_gallery"),
                        my_iter = 0, // zero based
                        next_iter,
                        numb_img = $("#image_gallery > div").length; // 10

                    if ($("#how_to div.row:eq('" + my_iter + "')").not(":visible")) {
                        $("#how_to div.row").hide();
                        $("#how_to div.row:eq('" + my_iter + "')").show();
                    }

                    if ($('body').hasClass('no-touch_device')) {
                        console_log('no touch device');
                        Hammer(swipe_img).off('click').on('click', function (e) { // swiperight   $('#image_gallery')
                            e.stopPropagation();
                            next_iter = my_iter + 1;
                            if (next_iter === numb_img) {
                                next_iter = 0;
                            }
                            swipe_images(my_iter, next_iter, 'left');
                            my_iter = next_iter;
                        });
                    } else if ($('body').hasClass('touch_device')) {
                        console_log('touch device');
                        Hammer(swipe_img).off('swipe').on("swipe", function (e) {
                            e.stopPropagation();
                            if (e.gesture.direction === 'left') {
                                next_iter = my_iter + 1;
                                if (next_iter === numb_img) {
                                    next_iter = 0;
                                }
                                swipe_images(my_iter, next_iter, 'left');
                                my_iter = next_iter;
                            } else if (e.gesture.direction === 'right') {
                                next_iter = my_iter - 1;
                                if (next_iter < 0) {
                                    next_iter = numb_img - 1;
                                }
                                swipe_images(my_iter, next_iter, 'right');
                                my_iter = next_iter;
                            }
                        });
                    }

                function swipe_images(my_iter, next_iter, direction) {
                    var afterDirection;
                    if (direction == 'left') {
                        afterDirection = 'right';
                    }
                    else {
                        afterDirection = 'left';
                    }
                    var images = $("#image_gallery > div.row");
                    console_log('Next image: ' + next_iter);
                    images.eq(my_iter).hide('slide', {direction:direction, complete:function () {
                        images.eq(next_iter).show('slide', {direction:afterDirection}, 1000);
                    }}, 1000);
                }

                    break;
                case 'learn_more':
                    break;
                case 'logout':
                    MG_API.curtain.show();
                    $("#login #username").attr('value', '');
                    $("#login #password").attr('value', '');

                    MG_API.ajaxCall('/user/logout', function () {
                        MG_GAME_ONEUP.socketDisconnect();

                        MG_API.settings.shared_secret = '';
                        MG_API.ajaxCall('/user/sharedsecret', function (response) {
                            if (MG_API.checkResponse(response)) {
                                if (response.shared_secret !== undefined && response.shared_secret !== "") {
                                    MG_API.settings.shared_secret = response.shared_secret;
                                    MG_API.curtain.hide();
                                    MG_GAME_ONEUP.setLoginScreen();

                                    // If facebook login was used, alerts the user
                                    if (localStorage['fblogin']) {
                                        $().toastmessage("showToast", {
                                            text:"Close your browser to logout of facebook!",
                                            position:"tops-center",
                                            type:"notice",
                                            background:"white",
                                            color:"black",
                                            stayTime:MG_GAME_ONEUP.toastStayTime,
                                            addClass:MG_GAME_ONEUP.toastBackgroundClass
                                        });
                                        localStorage.removeItem('fblogin');
                                    }
                                } else {
                                    throw "MG_API.init() can't retrieve shared secret";
                                }
                            }
                        });
                    });

                    break;
                case 'account':
                    $("#account_playlist").empty();
                    $("#account_interest").empty();
                    $("#account_bookmark").empty();
                    $("#header").find('.setting').show();

                    $("#account .row_link").each(function () {
                        $(this).unbind('click').click(function (e) {
                            e.stopPropagation();
                            $(this).find("a").click();
                        });
                    });

                    //getBookmarks
                    MG_API.ajaxCall('/multiplayer/getBookmarks/gid/' + MG_GAME_API.settings.gid, function (account_bookmarks) {
                        var json = {};
                        json.bookmarked = account_bookmarks;
                        $("#template-account_bookmark").tmpl(json).appendTo($("#account_bookmark")).after(function () {
                            function Slider(container) {
                                this.container = container;
                                this.imgs = container.find('img');
                                this.myImg = container.find('#my_image');
                                this.myImgPaddingLeftValue = parseInt(container.css('padding-left'), 10);
                                if (this.imgs.length > 0) {
                                    this.imgWidth = (this.imgs[0].width || 0) + (this.myImgPaddingLeftValue || 0);
                                } else {
                                    this.imgWidth = 0;
                                }
                                this.windowWidth = $(window).width();
                                this.allImagesWidth = this.getAllImagesWidth();
                                this.sliderMaxOffset = this.getSliderMaxOffset();
                                this.sliderOffset = 0;

                            }

                            ;

                            Slider.prototype.getAllImagesWidth = function () { // must be private
                                var tmpSum = 0;
                                var i = 0;
                                for (i; i < this.imgs.length; i++) {
                                    tmpSum += this.imgs[i].width;
                                }
                                return tmpSum;
                            };


                            Slider.prototype.getSliderMaxOffset = function () { // must be private
                                var tmp = this.allImagesWidth / this.windowWidth;
                                var offset = Math.floor(tmp);
                                return offset;
                            };

                            Slider.prototype.transition = function (direction) {
                                var unit;
                                if (direction === "next" && !(mySlider.sliderOffset < mySlider.sliderMaxOffset)) { // no more images for slide right
                                    return;
                                }
                                if (direction !== "next" && !(mySlider.sliderOffset > 0)) { // no more images for slide left
                                    return;
                                }
                                if (this.windowWidth != 0) {
                                    if (direction === "next") { // clicked on the next button
                                        unit = '-=';
                                        this.sliderOffset++;
                                    }
                                    else {
                                        unit = '+=';
                                        this.sliderOffset--;
                                    }
                                }
                                this.container.animate(
                                    {'margin-left':unit ? (unit + this.windowWidth) : this.windowWidth}
                                )
                            };

                            var container = $('#account .bookmark');
                            var mySlider = new Slider(container);

                            Hammer(container).off("swipeleft").on("swipeleft", function () { // swipeleft
                                mySlider.transition('next');
                            });

                            Hammer(container).off("swiperight").on("swiperight", function () { // swiperight
                                mySlider.transition('previous');
                            });
                            // add zoom to scaled and move swipe_left::swipe_right
                        });
                    });

                    // Interests
                    MG_API.ajaxCall('/multiplayer/getInterests/gid/' + MG_GAME_API.settings.gid, function (account_interest) {
                        var json = {};
                        json.interests = account_interest;
                        $("#template-account_interest").tmpl(json).appendTo($("#account_interest")).after(function () {
                            $("#account_interest .delete").each(function () {
                                $(this).off('click').on('click', function (e) {
                                    e.stopPropagation();
                                    var row = $(this).closest('.row');
                                    var row_id = row.attr('interest_id');
                                    confirmPretty("Do you really want to remove this interest?", function () {
                                        MG_API.ajaxCall('/multiplayer/removeInterest/gid/' + MG_GAME_API.settings.gid + '/id/' + row_id + '/', function (response) {
                                            row.remove();
                                        });
                                    })
                                });
                            });
                        });
                    });

                    // List of all institutions that are not banned yet
                    MG_API.ajaxCall('/multiplayer/getInstitutions/gid/' + MG_GAME_API.settings.gid, function (account_playlist) {
                        var json = {};
                        json.play_lists = account_playlist;
                        $("#template-account_playlist").tmpl(json).appendTo($("#account_playlist")).after(function () {
                            $("#account_playlist").find(".row").unbind('click').click(function (e) {
                                e.stopPropagation();
                                $(this).find(".institution").click();
                            });

                            // click on an institution
                            $("#account_playlist .row .institution").each(function (event) {
                                $(this).off('click').on('click', function (e) {
                                    e.stopPropagation();
                                    var row = $(this).closest(".row");
                                    MG_GAME_ONEUP.institution_id = row.attr('institution_id');
                                    MG_GAME_ONEUP.back_location = 'account';
                                    // institution_info
                                    MG_GAME_ONEUP.actions('institution_info', '');
                                });

                            });

                            // delete
                            $("#account_playlist .delete").each(function () {
                                $(this).off('click').on('click', function (e) {
                                    e.stopPropagation();
                                    var row = $(this).closest('.row');
                                    var row_id = row.attr('institution_id');
                                    confirmPretty("Do you really want to stop playing media from this institution?", function () {
                                        MG_API.ajaxCall('/multiplayer/banInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + row_id + '/', function (response) {
                                            row.remove();
                                        });
                                    })
                                });
                            });
                        });
                    });

                    break;
                case 'find_opponent':
                    $('#find_opponent input.opponent_name').unbind("keypress").keypress(function (e) {
                        if (e.which == 13) {
                            $('#find_opponent .play').click();
                        }
                    });
                    break;
                case 'institution_info':
                    $("#institution_info").empty();
                    $("#header").find('.setting').hide();
                    $("#header").find('.back').show();
                    MG_API.ajaxCall('/multiplayer/GetInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function (response) {
                        var inst_remove = '<div class="right top_btn favorite" type="remove">REMOVE FROM PLAYLIST</div>',
                            inst_add = '<div class="right top_btn favorite" type="add">FAVORITE</div>';

                        //show_institution
                        $("#template-show_institution").tmpl(response).appendTo($("#institution_info")).after(function () {

                        });
                        if (response[0].isBanned === false) {
                            // Institution is in favorite list
                            $("#header").append(inst_remove);
                        } else {
                            $("#header").append(inst_add);
                        }

                        addClickFav();

                        function addClickFav() {
                            $("#header").find('.favorite').off('click').on('click', function () {
                                $("#header").find('.favorite').remove();
                                if ($(this).attr('type') === 'remove') {
                                    MG_API.ajaxCall('/multiplayer/banInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function (response) {
                                        setTimeout(function () {
                                        }, 3000);
                                        $("#header").append(inst_add);
                                        addClickFav();
                                    });
                                } else {
                                    MG_API.ajaxCall('/multiplayer/unbanInstitution/gid/' + MG_GAME_API.settings.gid + '/id/' + MG_GAME_ONEUP.institution_id + '/', function (response) {
                                        setTimeout(function () {
                                        }, 3000);
                                        $("#header").append(inst_remove);
                                        addClickFav();
                                    });
                                }
                            });
                        }

                        $("#header").find('.back').off('click').on('click', function (e) {
                            e.preventDefault();
                            $("#header").find('.back').hide();
                            $("#header").find('.favorite').remove();
                            $("#header").find('.setting').show();
                            click_parent = MG_GAME_ONEUP.back_location;
                            $("a[location='" + MG_GAME_ONEUP.back_location + "']").click();
                            return false;
                        });
                    });
                    break;
                default:
                    console_log('action is unknown');
                    break;
            }

            if (click_parent === '') {
                $("#content div:visible:eq(0)").hide();
                $("#" + action).slideUp().show();
            }
        },
        setClick:function () {
            $("li.row div").click(function (e) {
                e.stopPropagation();
                $(this).find("a").click();
            });

            $("#content a[href='#']").off('click').on('click', function (e) {
                e.preventDefault();
                var location = $(this).attr('location');
                if (location != undefined) {
                    var location = $(this).attr('location');
                    $("#content div:visible:eq(0)").hide();
                    MG_GAME_ONEUP.actions(location, '');
                }
                return false;
            });
        },
        validUser:function () {
            MG_API.curtain.show();
            if (typeof io !== 'undefined') {
                console_log('Socket is already running.');
                validUser();
            } else {
                yepnope([
                    {
                        load:[
                            MG_INIT.nodeJSUrl + '/socket.io/socket.io.js'
                        ],
                        complete:function () {
                            if (typeof io === 'undefined') {
                                alert('Contact Administrator. Error in the server node.');
                            } else {
                                validUser();
                            }
                        }
                    }
                ]);
            }

            function validUser() {
                $("#menu-right").css('visibility', 'visible');
                if(typeof(MG_GAME_ONEUP.socketReconnect) === "function"){
                    MG_GAME_ONEUP.isDisconnected=false;
                    MG_GAME_ONEUP.socketReconnect();
                }else{
                    MG_GAME_ONEUP.nodeInit();
                }
                $("#header .setting").show();
                // Called just after sharedSecret is triggered
                ///api/multiplayer/register/gid/OneUp/
                MG_API.ajaxCall('/multiplayer/register/gid/' + MG_GAME_API.settings.gid, function (response) {
                    MG_GAME_ONEUP.user = response.user;

                    MG_API.ajaxCall('/multiplayer/getEndedGames/gid/' + MG_GAME_API.settings.gid, function (response) {
                        MG_GAME_ONEUP.endedGames = response;
                    });

                    // prevent bind events again after logout/login
                    if ($("#main_screen").find(".username").html() === '') {
                        $("a[location='main_screen']").on('click', function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            MG_GAME_ONEUP.actions('main_screen', 'menu');
                        });

                        $("a[location='game_customize']").on('click', function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            MG_GAME_ONEUP.actions('game_customize', 'menu');
                        });

                        $("a[location='how_to']").on('click', function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            MG_GAME_ONEUP.actions('how_to', 'menu');
                        });

                        $("a[location='learn_more']").on('click', function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            MG_GAME_ONEUP.actions('learn_more', 'menu');
                        });

                        $("a[location='account']").on('click', function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            MG_GAME_ONEUP.actions('account', 'menu');
                        });

                        $("a[location='logout']").on('click', function (e) {
                            e.stopPropagation();
                            e.preventDefault();
                            MG_GAME_ONEUP.actions('logout', 'menu');
                        });
                    }

                    $("#main_screen").find(".username").html(response.user.username);

                    $("#menu-right a[location='main_screen']").click();

                    MG_API.curtain.hide();
                });
            }
        },
        ajaxCall:function (path, callback, options, doNotSaveLastCallTime) {
            var secretHeader = ('X_' + MG_API.settings.app_id + '_SHARED_SECRET').replace(/\_/g, "-");

            var defaults = {
                url:MG_API.settings.api_url + path,
                // set needed shared secret header
                headers:$.parseJSON('{"' + secretHeader + '" : "' + MG_API.settings.shared_secret + '"}'),
                success:callback,
                timeout:45000, // 45 seconds
                error:function (xhr, textStatus, thrownError) {
                    if (xhr.status == 400) {
                        MG_GAME_ONEUP.actions('logout', '');
                        //logout
                    } else {
                        if (textStatus === "timeout") {
                            var error = "Timeout error: Connection Has Been Lost";
                        } else {
                            var error_response = '';
                            if (typeof JSON.parse(xhr.responseText) === 'object') {
                                var err = JSON.parse(xhr.responseText);
                                if (typeof err.errors !== 'undefined') {
                                    if (typeof err.errors === 'object') {
                                        $.each(err.errors, function (key, value) {
                                            error_response += "[" + value + "] <br />";
                                        });
                                    } else {
                                        error_response = err.errors;
                                    }
                                } else {
                                    error_response = '[' + xhr.responseText + '].';
                                }
                            } else {
                                error_response = '[' + xhr.responseText + '].';
                            }
                            var error = 'Following error occurred: <br />' + error_response;
                        }
                        $().toastmessage("showToast", {
                            text:error,
                            position:"tops-center",
                            type:"notice",
                            background:"white",
                            color:"black"
                        });
                    }
                }
            }
            if (options) {
                defaults = $.extend(defaults, options); //Pull from both defaults and supplied options
            }
            var jsXHR = $.ajax(defaults);

            if (!doNotSaveLastCallTime) {
                MG_API.timeLastCall = new Date().getTime();
            }
        },

        setLoginScreen:function () {
            MG_API.curtain.hide();
            $("#login").show();
            $("#header .setting").hide();

            $("#facebook").off('click').on('click', function () {
                MG_API.curtain.show();
                //alert(MG_GAME_ONEUP.settings.arcade_url +"/site/login/provider/facebook?backUrl=" + encodeURIComponent(MG_GAME_ONEUP.settings.game_base_url + '/' + MG_GAME_ONEUP.settings.gid));
                window.location.href = MG_GAME_ONEUP.settings.arcade_url + "/site/login/provider/facebook?backUrl=" + encodeURIComponent(MG_GAME_ONEUP.settings.game_base_url + '/' + MG_GAME_ONEUP.settings.gid);

                // keeps track of facebook login
                localStorage['fblogin'] = true;
            });

            $('#login input#password').unbind("keypress").keypress(function (e) {
                if (e.which == 13) {
                    $("#btn_login").click();
                }
            });

            $("#btn_login").off('click').on('click', function (e) {
                e.preventDefault();
                if ((jQuery.trim($("#login #username").val()).length + jQuery.trim($("#login #password").val()).length) < 1) {
                    $().toastmessage("showToast", {
                        text:"Username and passwords are required!",
                        position:"tops-center",
                        type:"notice",
                        background:"white",
                        color:"black",
                        stayTime:MG_GAME_ONEUP.toastStayTime,
                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                    });
                } else {
                    //user/gameLogin/
                    //MG_API.ajaxCall('/user/login/', function(response) {
                    MG_API.ajaxCall('/user/login', function (response) {
                            if (response.status === 'ok') {
                                MG_GAME_ONEUP.validUser();
                            } else {
                                $().toastmessage("showToast", {
                                    text:'Wrong username or password.',
                                    position:"tops-center",
                                    type:"notice",
                                    background:"white",
                                    color:"black",
                                    stayTime:MG_GAME_ONEUP.toastStayTime,
                                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                                });
                            }
                        }, {
                            type:'post',
                            data:{
                                password:jQuery.trim($("#login #password").val()),
                                login:jQuery.trim($("#login #username").val()),
                                rememberMe:jQuery.trim($("#login #rememberMe").prop('checked'))
                            }
                        }
                    );
                }
                return false;
            });
        },
        /*
         REGISTER USER AS ONLINE TO GAME SERVER
         */
        onapiinit:function () {
            MG_GAME_ONEUP.setClick();
            if (MG_INIT.isLogged === 'true') {
                MG_GAME_ONEUP.validUser();
            } else {
                MG_GAME_ONEUP.setLoginScreen();
            }
            MG_GAME_API.curtain.hide();
        },
        playSound:function (index) {
            console_log("Play sound: " + index);
            MG_GAME_ONEUP.sound[index].play(MG_GAME_ONEUP.sounds[index]);
        },
        nodeInit:function () {
            // add {secure: true} if running socket.io over HTTPS
//             var socket = io.connect("'" + MG_INIT.nodeJSUrl + "'", {secure: true}),
            var socket = io.connect("'" + MG_INIT.nodeJSUrl + "'"),

                game_title = '<b>' + MG_GAME_ONEUP.gameName + '</b> ';

            MG_GAME_ONEUP.socketDisconnect = function () {
                if (typeof(socket.disconnect) === "function") {
                    if (!$.browser.webkit) {
                        socket.disconnect();
                    } else {
                        //socket.packet({ type:'disconnect' });
                        socket.$emit('disconnect');
                    }
                    //socket = {};
                    //delete io.sockets[MG_INIT.nodeJSUrl];
                    //io.j = [];
                }
            };

            MG_GAME_ONEUP.socketReconnect = function () {
                if (typeof socket !== 'undefined') {
                    socket.socket.reconnect();
                }
            };



            socket.on('reconnect', function () {
                console_log('Reconnected to the server');
                socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);
                if(MG_GAME_ONEUP.isDisconnected){
                    MG_API.ajaxCall('/multiplayer/register/gid/' + MG_GAME_API.settings.gid, function (response) {
                        MG_GAME_ONEUP.user = response.user;
                    });
                    MG_GAME_ONEUP.isDisconnected = false;
                }
            });

            socket.on('disconnect', function () {
                MG_GAME_ONEUP.isDisconnected = true;
                console_log('DISCONNECT is fired!!! ');
            });

            socket.on('registerFailure', function (data) {
                console_log(data);
                console_log('registerFailure');
                //TODO what to do in this case
                MG_GAME_ONEUP.actions('logout', 'menu');
            });

            socket.on('challenge', function (data) {
                //Receive challenge from game player
                // data is JSON encoded object GameUserDTO
                var response = JSON.parse(data.payload);
                console_log(response);
                $().toastmessage("showToast", {
                    text:game_title + ": " + response.username + " challenged you to a game!",
                    position:"tops-center",
                    type:"notice",
                    background:"white",
                    color:"black",
                    stayTime:MG_GAME_ONEUP.toastStayTime,
                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                });
                if ($("#main_screen").is(":visible")) {
                    $("#menu-right a[location='main_screen']").click();
                }
            });

            socket.on('rejectChallenge', function (data) {
                // Receive reject challenge from game player
                // data is JSON encoded object GameUserDTO
                var response = JSON.parse(data.payload);
                console_log(response);
                $().toastmessage("showToast", {
                    text:game_title + ": " + response.username + " turned down your challenge.",
                    position:"tops-center",
                    type:"notice",
                    background:"white",
                    color:"black",
                    stayTime:MG_GAME_ONEUP.toastStayTime,
                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                });
                if ($("#main_screen").is(":visible")) {
                    $("#menu-right a[location='main_screen']").click();
                }
            });

            socket.on('newTurn', function (data) {
                // Receive information when new turn is created
                // data is JSON encoded object GameTurnDTO
                var response = JSON.parse(data.payload);
                console_log('Receive information when new turn is created');

                if ($("#game_screen").is(":visible")) {
                    if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10) &&
                        ($("#game_screen .round").attr('status') === 'waiting' || $("#game_screen .round").attr('opponent') === 'finished')) {
                        MG_GAME_ONEUP.actions('game_screen', '');
                        MG_GAME_ONEUP.playSound('newround');
                        $("#header .words").show();
                        MG_GAME_ONEUP.oneup_hide_curtain();
                    }
                } else if ($(".index_screen").not(":visible")) {
                    if ($("#main_screen").is(":visible")) {
                        $("#menu-right a[location='main_screen']").click();
                    }
                    $().toastmessage("showToast", {
                        text:game_title + ": " + " It's your turn!",
                        position:"tops-center",
                        type:"notice",
                        background:"white",
                        color:"black",
                        stayTime:MG_GAME_ONEUP.toastStayTime,
                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                    });
                }
            });

            socket.on('gameEnd', function (data) {
                // Receive when the game end i.e. no more turns
                // data is JSON encoded integer of played game id
                console_log('Game End is fired!');
                var response = JSON.parse(data.payload);
                console_log(response);

                if ($("#game_screen").is(":visible")) {
                    if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                        MG_GAME_ONEUP.actions('final_screen', '');
                        MG_GAME_ONEUP.playSound('gameresult');
                        MG_GAME_ONEUP.oneup_hide_curtain();
                    }
                } else if ($(".index_screen").not(":visible")) {
                    // need to add line
                    var counter = MG_GAME_ONEUP.endedGames.length;
                    MG_GAME_ONEUP.endedGames[counter] = {};
                    MG_GAME_ONEUP.endedGames[counter].playedGameId = response.playedGameId;
                    MG_GAME_ONEUP.endedGames[counter].opponentId = response.id;
                    MG_GAME_ONEUP.endedGames[counter].opponentName = response.username;
                    MG_GAME_ONEUP.endedGames[counter].turnUserId = 0;

                    if ($("#main_screen").is(":visible")) {
                        $("#menu-right a[location='main_screen']").click();
                    }
                }
            });

            socket.on('penalty', function (data) {
                // Receive penalty
                // data is JSON encoded negative integer of penalty scores
                var response = JSON.parse(data.payload);
                console_log(response);

                if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                    $().toastmessage("showToast", {
                        text:game_title + ": " + MG_GAME_ONEUP.opponent_name + " got your point with " + "'" + response.tag.tag + "'",
                        position:"tops-center",
                        type:"notice",
                        background:"white",
                        color:"black",
                        stayTime:MG_GAME_ONEUP.toastStayTime,
                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                    });
                    // no more actions needed it's handled from response
                }
            });

            socket.on('bonus', function (data) {
                // Receive bonus points
                // data is JSON encoded integer of bonus scores
                var response = JSON.parse(data.payload);
                console_log(response);

                $().toastmessage("showToast", {
                    text:game_title + ": " + "You got " + response.opponentName + "'s" + " point with " + "'" + response.tag.tag + "'" + "!",
                    position:"tops-center",
                    type:"notice",
                    background:"white",
                    color:"black",
                    stayTime:MG_GAME_ONEUP.toastStayTime,
                    addClass:MG_GAME_ONEUP.toastBackgroundClass
                });

                if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                    var current_points = parseInt($("#game_screen .you label").text(), 10);

                    $("#game_screen .you label").html((current_points + 1));
                    MG_GAME_ONEUP.playSound('feedbackbonus');
                    $("#game_screen .words").find("div[tag='" + response.tag.tag + "']").replaceWith(calculatedRow(response.tag.tag, response.tag.score, MG_GAME_ONEUP.opponent_name, ''));
                }
            });

            socket.on('opponentWaiting', function (data) {
                // Receive notification that opponent finished his turn and waiting for you
                // data is JSON encoded integer of played game id
                var response = JSON.parse(data.payload);
                console_log('opponentWaiting');
                console_log(response);

                if ($("#main_screen").is(":visible")) {
                    $().toastmessage("showToast", {
                        text:game_title + ": " + "It's your turn! " + response.opponentName + " is waiting...",
                        position:"tops-center",
                        type:"notice",
                        background:"white",
                        color:"black",
                        stayTime:MG_GAME_ONEUP.toastStayTime,
                        addClass:MG_GAME_ONEUP.toastBackgroundClass
                    });
                    $("#menu-right a[location='main_screen']").click();
                } else if ($("#game_screen").is(":visible") || $("#word_screen").is(":visible")) {
                    if (parseInt(MG_GAME_ONEUP.pass_game_id, 10) === parseInt(response.playedGameId, 10)) {
                        $().toastmessage("showToast", {
                            text:game_title + ": " + response.username + " finished. It's your turn!",
                            position:"tops-center",
                            type:"notice",
                            background:"white",
                            color:"black",
                            stayTime:MG_GAME_ONEUP.toastStayTime,
                            addClass:MG_GAME_ONEUP.toastBackgroundClass
                        });
                        $("#game_screen .round").attr('opponent', 'finished')
                    }
                }

            });

            socket.emit('register', MG_API.settings.shared_secret, MG_GAME_API.settings.gid);

        },
        /*
         * display games turn
         */
        renderTurn:function (response) {
            console_log('Render turn');
        },

        /*
         * display the final turn
         */
        renderFinal:function () {
            console_log('Game over');
        },

        /*
         * evaluate each response from /api/games/play calls (POST or GET)
         */
        onresponse:function (response) {
            console_log('response');
        },


        /*
         * on callback for the submit button
         */
        onsubmit:function () {
            console_log('onsubmit');
            return false;
        },
        /*
         * this method appears to be not used
         */
        submit:function () {
            console_log('submit');
            return false;
        },

        /*
         * process /api/games/play get request responses
         */
        ongameinit:function (response) {

        },

        liftOff:function () {
            MG_GAME_ONEUP.renderFinal();
        },

        nextlevel:function (skip) {
        }
    });
}(jQuery);

function confirmPretty(text, onOk) {
    $("<div title='Confirmation'>" + text + "</div>").dialog({
        modal:true,
        dialogClass:'no-title',
        minWidth:450,
        maxWidth:600,
        buttons:[
            {
                text:"Cancel",
                id:"confirm_no",
                click:function () {
                    $(this).dialog('destroy').remove();
                }
            },
            {
                text:"Ok",
                id:"confirm_yes",
                click:function () {
                    onOk();
                    $(this).dialog('destroy').remove();
                }
            }
        ]
    });
}

(function ($) {
    $.extend(jQuery.tmpl.tag, {
        "for":{
            _default:{$2:"var i=1;i<=1;i++"},
            open:'for ($2){',
            close:'};'
        }
    });

    $.extend(jQuery.tmpl.tag, {
        "var":{
            open:"var $1;"
        }
    });
})(jQuery);

function calculatedRow(tag, score, opponent_name, tag_type) {
    var new_html,
        html_class;
    if (score === null) {
        score = 1;
    }

    if (parseInt(score, 10) === 1 && tag_type === 'new') {
        html_class = 'standard_bar';
        new_html = '<span>+1</span><span class="tag">' + tag + '</span>';
    } else if (parseInt(score, 10) === 1) {
        html_class = 'up_bar';
        new_html = '<span>+1</span><span class="tag">' + tag + '</span>';
    } else if (score === -1) {
        html_class = 'upped_bar';
        new_html = '<span>-1</span><span class="tag">' + tag + '</span><span class="bar_right lines_3">' + opponent_name + '<br/>GOT YOUR<br/>POINT!</span>';
    } else if (parseInt(score, 10) === 2) {
        html_class = 'up_bar';
        new_html = '<span>+2</span><span class="tag">' + tag + '</span><span class="bar_right lines_3">YOU GOT<br/>' + opponent_name + "'s" + '<br/>POINT!</span>';
    } else if (parseInt(score, 10) >= 3) {
        html_class = 'bonus_bar';
        new_html = '<span>+' + parseInt(score, 10) + '</span><span class="tag">' + tag + '</span><span class="bar_right lines_2" style="padding-top: 5px;">GREAT<br/>WORD!</span>';
    } else {
        html_class = 'standard_bar';
        new_html = '<span>' + score + '</span><span class="tag">' + tag + '</span>';
    }

    return '<div class="small_row ' + html_class + '" tag="' + tag + '"><div class="no_right_padding">' + new_html + '</div></div>';
}

function onResize() {
    var max_height,
        gamearea = $("#gamearea");

    // this is for apps image should not resize
    if (BrowserDetect.browser === 'Other' && is_touch_device) {
        return true;
    }

    if (is_touch_device) {
        max_height = $(window).height() - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height':max_height, 'max-width':$(window).width() - 35});
    } else {
        max_height = $(window).height() - $("#header").height() - 1 - $("#content header").height() - $("#content footer").height() - parseInt(gamearea.css('padding-top'), 10) - parseInt(gamearea.css('padding-bottom'), 10);
        $("#image_to_tag").css({'max-height':max_height, 'max-width':$(window).width() - 35});
    }
}

function console_log(logged_text) {
//    if (Modernizr.development_mode) {
    console.log(logged_text);
//    }
}

$.fn.isBound = function (type, fn) {
    var data = this.data('events')[type];

    if (data === undefined || data.length === 0) {
        return false;
    }

    return (-1 !== $.inArray(fn, data));
};
